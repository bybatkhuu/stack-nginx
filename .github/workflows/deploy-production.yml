name: Deploy Production

on:
  push:
    branches:
      - production
  # pull_request:
  #   branches:
  #     - production
  #   types:
  #     - closed

jobs:
  deploy_production:
    name: Deploy
    runs-on: ubuntu-22.04
    environment:
      name: PRODUCTION
    permissions:
      contents: read
    steps:
      - name: Configure ZeroTier
        uses: zerotier/github-action@v1.0.1
        with:
          network_id: ${{ secrets.ZEROTIER_NETWORK_ID }}
          auth_token: ${{ secrets.ZEROTIER_TOKEN }}
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          cat >> ~/.ssh/config <<END
          Host SERVER
            HostName ${{ secrets.ZEROTIER_HOST }}
            User ${{ secrets.DEPLOY_SSH_USER }}
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking no
          END
      - name: Check connection
        shell: bash
        run: |
          count=30
          while ! ping -c 1 ${{ secrets.ZEROTIER_HOST }} ; do
            echo "Waiting to ping...";
            sleep 1;
            let count=count-1
          done
          echo "OK: Connection established!"
      - name: Stop services
        run: sleep 3 && ssh SERVER 'cd ${{ secrets.DEPLOY_PROJECT_DIR }} && docker compose down --remove-orphans'
      - name: Backup
        run: ssh SERVER 'cd ${{ secrets.DEPLOY_PROJECT_DIR }} && ./scripts/backup.sh'
      - name: Update to latest version
        run: ssh SERVER 'cd ${{ secrets.DEPLOY_PROJECT_DIR }} && git checkout production && git fetch origin production && git reset --hard origin/production && docker compose pull'
      - name: Start services
        if: ${{ always() }}
        run: ssh SERVER 'cd ${{ secrets.DEPLOY_PROJECT_DIR }} && docker compose up -d --remove-orphans --force-recreate'
      # - name: Test deployment
      #   shell: bash
      #   run: |
      #     count=120
      #     while ! curl -kIf ${{ secrets.PUBLIC_URL }} ; do
      #       echo "Waiting to curl...";
      #       sleep 1;
      #       let count=count-1
      #     done
      #     echo "OK: Deployment successful!"
