name: Deploy Production

on:
  push:
    branches:
      - prod
  # pull_request:
  #   branches:
  #     - prod
  #   types:
  #     - closed

jobs:
  deploy_production:
    name: Deploy
    runs-on: ubuntu-22.04
    environment:
      name: PRODUCTION
    permissions:
      contents: read
    steps:
      - name: Configure Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          cat >> ~/.ssh/config <<END
          Host SERVER
            HostName ${{ secrets.TS_HOST }}
            User ${{ secrets.DEPLOY_SSH_USER }}
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking no
          END
      - name: Check connection
        shell: bash
        run: |
          echo "[INFO]: Checking Tailscale connection..."
          count=30
          while ! ping -c 1 ${{ secrets.TS_HOST }} ; do
            if [ ${count} -le 0 ]; then
              echo "[ERROR]: Timed out waiting for Tailscale host!"
              exit 1
            fi
            echo "[INFO]: Waiting to ping...";
            sleep 1;
            ((count--))
          done
          echo "[OK]: Connection established!"
      - name: Run pre-deployment script
        run: sleep 3 && ssh SERVER 'cd ${{ secrets.DEPLOY_PROJECT_DIR }} && ./scripts/pre-deploy.sh'
      - name: Backup
        run: ssh SERVER 'cd ${{ secrets.DEPLOY_PROJECT_DIR }} && ./scripts/backup.sh'
      - name: Stop services
        run: ssh SERVER 'cd ${{ secrets.DEPLOY_PROJECT_DIR }} && docker compose down --remove-orphans'
      - name: Update to latest version
        run: ssh SERVER 'cd ${{ secrets.DEPLOY_PROJECT_DIR }} && git fetch origin && git checkout prod && git reset --hard origin/prod && docker compose pull'
      - name: Start services
        if: ${{ always() }}
        run: ssh SERVER 'cd ${{ secrets.DEPLOY_PROJECT_DIR }} && docker compose up -d --remove-orphans --force-recreate'
      - name: Test deployment
        shell: bash
        run: |
          echo "[INFO]: Checking deployment..."
          count=120
          while ! curl -kIf ${{ secrets.PUBLIC_URL }} ; do
            if [ ${count} -le 0 ]; then
              echo "[ERROR]: Timed out waiting for deployment!"
              exit 1
            fi
            echo "[INFO]: Waiting to curl...";
            sleep 1;
            ((count--))
          done
          echo "[OK]: Deployment successful!"
      - name: Run post-deployment script
        run: ssh SERVER 'cd ${{ secrets.DEPLOY_PROJECT_DIR }} && ./scripts/post-deploy.sh'
